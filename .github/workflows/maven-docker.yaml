name: Maven and Docker

on:  # yamllint disable-line rule:truthy
  workflow_call:
    inputs:
      NAME:  # name of service, (ex: peeq-tracking)
        required: true
        type: string
      VERSION:
        required: true
        type: string
      JAVA_VERSION:
        default: '17'
        required: false
        type: string
      MVN_ENV_VARS:  # -DmyVariable=someValue
        required: false
        type: string
      MVN_ARGS:
        default: 'clean install'
        required: false
        type: string
      MVN_ARGS_EXTRA:
        required: false
        type: string
      DOCKERFILE_FILE:
        default: './Dockerfile'
        required: false
        type: string
      TAG2:
        default: 'latest'
        required: false
        type: string

    secrets:
      GH_TOKEN:
        required: true
      REGISTRY_LOGIN_SERVER:
        required: true
      REGISTRY_USERNAME:
        required: true
      REGISTRY_PASSWORD:
        required: true
      MVN_ARGS_SECRETS:
        required: false

jobs:

  maven-docker:
    timeout-minutes: 15
    permissions:
      contents: 'read'
      id-token: 'write'
    runs-on: ubuntu-latest
    steps:

      - name: "‚òÅÔ∏è Checkout repository"
        uses: actions/checkout@v3

      - name: "üîß Set up JDK ${{ inputs.JAVA_VERSION }}"
        uses: actions/setup-java@v3
        with:
          java-version: '${{ inputs.JAVA_VERSION }}'
          distribution: 'temurin'

      # - name: "üîß Maven ~/.m2/settings.xml"
      #   env:
      #     NEXUS_FAVEDOM_DEV_PASSWORD: ${{ secrets.NEXUS_FAVEDOM_DEV_PASSWORD }}
      #   run: |
      #     wget https://raw.githubusercontent.com/ShipMagic/github-reusable-workflow/master/.m2/settings.xml
      #     envsubst < ./settings.xml > ~/.m2/settings.xml

      - name: "üî® Maven set version"
        env:
          VERSION: ${{ inputs.VERSION }}
        run: mvn versions:set -DnewVersion=${VERSION}

      - name: "üî® Build with Maven"
        run: |
          echo "MVN_ARGS        : ${{ inputs.MVN_ARGS }}"
          echo "MVN_ENV_VARS    : ${{ inputs.MVN_ENV_VARS }}"
          echo "MVN_ARGS_EXTRA  : ${{ inputs.MVN_ARGS_EXTRA }}"
          echo "MVN_ARGS_SECRETS: ${{ secrets.MVN_ARGS_SECRETS }}"
          mvn \
          ${{ secrets.MVN_ARGS_SECRETS }} \
          ${{ inputs.MVN_ENV_VARS }} \
          ${{ inputs.MVN_ARGS }} \
          ${{ inputs.MVN_ARGS_EXTRA }}

# https://learn.microsoft.com/en-us/azure/container-instances/container-instances-github-action
      - name: 'üê≥ Build and push image'
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.REGISTRY_LOGIN_SERVER }}
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}
      - run: |
          # docker build -f Dockerfile -t ${{ inputs.NAME }} .
          docker build . -t ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.NAME }}:${{ github.sha }}
          # docker push ${{ secrets.REGISTRY_LOGIN_SERVER }}/${{ inputs.NAME }}:${{ github.sha }}


      # - name: "üê≥ Docker: build, tag, and push"
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ${{ env.DOCKERFILE_FILE }}
      #     push: true
      #     tags: ${{ steps.docker-tags.outputs.tags }}

      # - name: "üåê Link to Container"
      #   env:
      #     GH_TOKEN: ${{ secrets.GH_TOKEN }}
# yamllint disable rule:line-length
        # run: |-
        #   echo "https://console.cloud.google.com/artifacts/docker/${{ inputs.PROJECT_ID }}/${{ inputs.GAR_LOCATION }}/peeq-docker/${{ inputs.NAME }}?project=${{ inputs.PROJECT_ID }}/"
        #   if [ "${{ github.event_name }}" = "pull_request" ]; then
        #     gh pr comment ${{ github.event.number }} \
        #     --body "üê≥ Container: [${{ inputs.NAME }} ${{ inputs.VERSION }}](https://console.cloud.google.com/artifacts/docker/${{ inputs.PROJECT_ID }}/${{ inputs.GAR_LOCATION }}/peeq-docker/${{ inputs.NAME }}?project=${{ inputs.PROJECT_ID }}/)"
        #   fi

# yamllint enable rule:line-length
